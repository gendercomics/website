////
/// @group helpers
////

/// Common link mixin
///
/// Provides the typography and focus state, regardless of link style.
///
/// @access public

@mixin link-common {
  @include typography-common;
  @include focusable-fill;
}

/// Default link style mixin
///
/// Provides the default unvisited, visited, hover and active states for links.
///
/// If you use this mixin in a component you must also include the
/// link-common mixin in order to get the focus state.
///
/// @example scss
///   .component__link {
///     @include link-common;
///     @include link-style-muted;
///   }
///
/// @access public

@mixin link-style-default {
  &:link {
    color: $link-colour;

    > * {
      pointer-events: none;
    }
  }

  &:visited {
    color: $link-visited-colour;
  }

  &:hover {
    color: $link-hover-colour;
  }

  &:active {
    color: $link-active-colour;
  }

  // When focussed, the text colour needs to be darker to ensure that colour
  // contrast is still acceptable
  &:focus {
    color: $focus-text-colour;
  }
}

/// Muted style link mixin
///
/// Used for secondary links on a page - the link will appear in muted colours
/// regardless of visited state.
///
/// If you use this mixin in a component you must also include the
/// link-common mixin in order to get the focus state.
///
/// @example scss
///   .component__link {
///     @include link-common;
///     @include link-style-muted;
///   }
///
/// @access public

@mixin link-style-muted {
  &:link,
  &:visited,
  &:hover,
  &:active {
    color: $secondary-text-colour;
  }

  // When focussed, the text colour needs to be darker to ensure that colour
  // contrast is still acceptable
  &:focus {
    color: $focus-text-colour;
  }

  // alphagov/_template includes a specific a:link:focus selector designed
  // to make unvisited links a slightly darker blue when focussed, so we need to
  // override the text colour for that combination of selectors.
  @include compatibility(_template) {
    &:link:focus {
      @include text-colour;
    }
  }
}

/// Text style link mixin
///
/// Overrides the colour of links to match the text colour. Generally used by
/// navigation components, such as breadcrumbs or the back link.
///
/// If you use this mixin in a component you must also include the
/// link-common mixin in order to get the focus state.
///
/// @example scss
///   .component__link {
///     @include link-common;
///     @include link-style-text;
///   }
///
/// @access public

@mixin link-style-text {
  // Override link colour to use text colour
  &:link,
  &:visited,
  &:hover,
  &:active,
  &:focus {
    @include text-colour;
  }

  // alphagov/_template includes a specific a:link:focus selector designed
  // to make unvisited links a slightly darker blue when focussed, so we need to
  // override the text colour for that combination of selectors.
  @include compatibility(_template) {
    &:link:focus {
      @include text-colour;
    }
  }
}

/// No visited state link mixin
///
/// Used in cases where it is not helpful to distinguish between visited and
/// non-visited links.
///
/// For example, navigation links to pages with dynamic content like admin
/// dashboards. The content on the page is changing all the time, so the fact
/// that youâ€™ve visited it before is not important.
///
/// If you use this mixin in a component you must also include the
/// link-common mixin in order to get the focus state.
///
/// @example scss
///   .component__link {
///     @include link-common;
///     @include link-style-no-visited-state;
///   }
///
/// @access public

@mixin link-style-no-visited-state {
  &:link {
    color: $link-colour;
  }

  &:visited {
    color: $link-colour;
  }

  &:hover {
    color: $link-hover-colour;
  }

  &:active {
    color: $link-active-colour;
  }

  // When focussed, the text colour needs to be darker to ensure that colour
  // contrast is still acceptable
  &:focus {
    color: $focus-text-colour;
  }
}

/// Print friendly link mixin
///
/// When printing, append the the destination URL to the link text, as long
/// as the URL starts with either `/`, `http://` or `https://`.
///
/// @access public

@mixin link-print-friendly {
  @include media-query($media-type: print) {
    &[href^="/"],
    &[href^="http://"],
    &[href^="https://"] {
      &::after {
        content: " (" attr(href) ")";
        font-size: 90%;

        // Because the URLs may be very long, ensure that they may be broken
        // at arbitrary points if there are no otherwise acceptable break
        // points in the line
        word-wrap: break-word;
      }
    }
  }
}
